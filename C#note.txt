默认的是double类型，可以不加d，也可以加，如果是float类型，必须加f，不然系统会默认为double类型 
ex. float num = 3.1415926f;

--------------------------------------------------------

string s = Console.Readline();

--------------------------------------------------------

隱式轉換

int a = 1;
double b = 1.333;
a = b;
--------------------------------------------------------

Convert轉換(字符串要是數字)

string a = "10"
int b = Convert.ToInt32(a);
Console.WriteLine(b); 
//10

--------------------------------------------------------

佔位符 {0} {1} {2}
Console.WriteLine("你好 {0}, {1}", a, b);

-----------------------------------------------------------

enum MyDate
{
	Mon = 0; Tue = 1;
}

MyDate date = MyDate.Mon;
int a = (int)date;

------------------------------------------------------------------

數組類型[] 數組名
int[] my_array;

數組名 = new 數組元素類型[元素個數]
my_array = new int[3];
int[] a = new int[3] {1, 2, 3};
int[] a = new int[] {1, 2, 3};
int[] a = {1, 2, 3};

遍歷數組
foreach(數組數據類型 臨時變量 in 數組名) //var item in num 
{
}

--------------------------------------------------------------------------------

函數申明
static 返回職類型 函數名 ([形式參數])
{
}

函數重載:相同函數名，不同傳入參數類型

----------------------------------------------------------------------------------------

函數高級參數

ref 
函數外必須為變量賦值
形參和實參前都必須加ref關鍵字  A(ref num); static void A(ref int num)

out 
可返回多個不同類型參數 Number(a,b, out max, out min);

-------------------------------------------------------------------------

[訪問修飾符] class 類名
{
}

實例化
類名 對象名 = new 類名();

----------------------------------------------------------------------

class Apple 
{
	private string color;
	public string Color 
	{
		get { return color;}
		set { color = value;} //value違系統關鍵字
	}
}
操作時
Apple apple = new Apple();
apple.Color = "red";
Console.WriteLine(apple.Color);

---------------------------------------------------------------------------------

多態
1.虛方法 2.抽象類 3.接口

1.虛方法: 父類中使用virtual關鍵字修飾 子類中用override進行重寫

2.抽象方法: 連方法體都沒有 
抽象類不能被實例化
關鍵字: abstract;
抽象類中的抽象方法在繼承的子類中必須重寫!!!!!

3.接口
當抽象類中所有的方法都是抽象方法的時候，就可以把這個抽象類用另一種形式變現出，叫接口
接口名通常大寫I開頭
接口實現不需要abtract










